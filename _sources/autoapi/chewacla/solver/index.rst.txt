chewacla.solver
===============

.. py:module:: chewacla.solver

.. autoapi-nested-parse::

   Solver for hklpy2.

   .. substitutions file is at the root of the docs
   .. include:: /substitutions.txt

   .. autosummary::

       ~ChewaclaSolver





Module Contents
---------------

.. py:class:: ChewaclaSolver(geometry: str, *, mode: str = '', **kwargs)

   Bases: :py:obj:`hklpy2.SolverBase`


   Solver for hklpy2.


   .. py:attribute:: name
      :value: 'chewacla'


      Name of this Solver.


   .. py:attribute:: version

      Version of this Solver.


   .. py:method:: addReflection(reflection: hklpy2.blocks.reflection.Reflection) -> None

      Add coordinates of a diffraction condition (a reflection).



   .. py:method:: calculate_UB(r1: hklpy2.blocks.reflection.Reflection, r2: hklpy2.blocks.reflection.Reflection) -> list[list[float]]

      Calculate the UB (orientation) matrix with two reflections.

      The method of Busing & Levy, Acta Cryst 22 (1967) 457.



   .. py:property:: extra_axis_names
      :type: list[str]


      Ordered list of any extra axis names (such as x, y, z).


   .. py:method:: forward(pseudos: dict) -> list[dict[str, float]]

      Compute list of solutions(reals) from pseudos (hkl -> [angles]).



   .. py:method:: geometries() -> list[str]
      :classmethod:


      Ordered list of the geometry names.

      EXAMPLES::

          >>> from hklpy2 import get_solver
          >>> solver = Solver("chewacla")
          >>> solver.geometries()
          []



   .. py:method:: inverse(reals: dict) -> dict[str, float]

      Compute dict of pseudos from reals (angles -> hkl).



   .. py:property:: modes
      :type: list[str]


      List of the geometry operating modes.


   .. py:property:: pseudo_axis_names
      :type: list[str]


      Ordered list of the pseudo axis names (such as h, k, l).


   .. py:property:: real_axis_names
      :type: list[str]


      Ordered list of the real axis names (such as th, tth).


   .. py:method:: refineLattice(reflections: list[hklpy2.blocks.reflection.Reflection]) -> hklpy2.blocks.lattice.Lattice

      Refine the lattice parameters from a list of reflections.



   .. py:method:: removeAllReflections() -> None

      Remove all reflections.



   .. py:property:: summary
      :type: pyRestTable.Table


      Table of this geometry (modes, axes).

      .. seealso:: https://blueskyproject.io/hklpy2/diffractometers.html#available-solver-geometry-tables


   .. py:attribute:: _gname


   .. py:property:: mode
      :type: str


      Diffractometer geometry operation mode for :meth:`forward()`.

      A mode defines which axes will be modified by the
      :meth:`forward` computation.


   .. py:attribute:: _all_extra_axis_names
      :value: None



   .. py:attribute:: _sample
      :value: None



   .. py:method:: __repr__() -> str


   .. py:property:: _metadata
      :type: dict


      Dictionary with this solver's summary metadata.


   .. py:property:: all_extra_axis_names
      :type: list[str]


      Unique, sorted list of extra axis names in all modes for chosen engine.


   .. py:property:: extras
      :type: dict


      Ordered dictionary of any extra parameters.


   .. py:property:: geometry
      :type: str


      Name of selected diffractometer geometry.

      Cannot be changed once solver is created.  Instead, make a new solver
      for each geometry.


   .. py:property:: lattice
      :type: Lattice


      Crystal lattice parameters.  (Not used by this |solver|.)


   .. py:property:: sample
      :type: object


      Crystalline sample.


   .. py:property:: _summary_dict

      Return a summary of the geometry (modes, axes)


   .. py:property:: UB

      Orientation matrix (3x3).


   .. py:attribute:: __slots__
      :value: ()



