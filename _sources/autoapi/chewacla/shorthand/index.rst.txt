chewacla.shorthand
==================

.. py:module:: chewacla.shorthand

.. autoapi-nested-parse::

   Describe a shorthand vocabulary for diffraction vectors.

   .. rubric:: Examples

   Default vocabulary
       The default `DirectionShorthand()` provides the three Cartesian axes
       mapped to unit basis vectors. Use short codes like ``'x+'`` or ``'+x'``
       to request +x, and ``'y-'`` or ``'-y'`` for -y.

   Custom vocabulary
       You can supply a custom mapping from single-letter keys to 3-element
       sequences (or arrays). For example::

           import numpy as np
           from chewacla.shorthand import DirectionShorthand

           ds = DirectionShorthand({'x': (1,0,0),
                                    'k': (0, np.cos(np.deg2rad(50)), np.sin(np.deg2rad(50)))})
           ds.vector('k+')   # unit vector for the k axis
           ds.vector('-x')   # negative x unit vector

       Keys must be single letters and values three-element sequences; the
       `vocabulary` setter validates shapes and normalizes keys to lower-case.

   .. autosummary::

       ~DirectionShorthand
       ~unit_vector









Module Contents
---------------

.. py:data:: DirectionVector

   Unit vector description of a direction.

.. py:data:: DirectionVectorInput

   Allowed variations for user input.

.. py:data:: DirectionMap

   Ordered dictionary of DirectionVectors, keyed by rotational axis names.

.. py:data:: DirectionMapInput

   Allowed variations for user input.

.. py:function:: unit_vector(v: numpy.ndarray) -> numpy.ndarray

   Return a unit vector from a length-3 ndarray.

   :param v: Input array of shape (3,).
   :type v: np.ndarray

   :returns: New array of shape (3,) with unit length.
   :rtype: np.ndarray

   :raises TypeError: If `v` is not an array-like of numeric type.
   :raises ValueError: If `v` does not have shape (3,) or has zero length.


.. py:class:: DirectionShorthand(vocabulary: Optional[DirectionMap | collections.abc.Mapping[str, collections.abc.Sequence[float]]] | None = None)

   Describe vectors with shorthand from xrayutilities.

   .. autosummary::

       ~vector
       ~vocabulary

   Example::

       >>> ds = DirectionShorthand()
       >>> ds.vector('x+')
       [1 0 0]


   .. py:property:: vocabulary
      :type: DirectionMap



   .. py:method:: vector(symbol: str) -> numpy.ndarray

      Convert a symbol like 'x+' or '+x' to a numpy array (copy).

      Behavior:
      - Accepts 'x+' (letter then sign) or '+x' (sign then letter).
      - Does NOT permute characters; validates positions instead.
      - Whitespace allowed; case-insensitive.



   .. py:method:: __repr__() -> str


